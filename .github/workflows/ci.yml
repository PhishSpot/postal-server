name: CI

on:
  push:
    branches:
      - develop
      - main

jobs:
  build:
    name: CI Image Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: repo
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - uses: docker/build-push-action@v4
        with:
          push: true
          tags: ghcr.io/${{ steps.repo.outputs.owner }}/postal-server:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ci
          platforms: linux/amd64

  publish-image:
    name: Publish Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: repo
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.owner }}/postal-server
          tags: |
            # Branch-specific tags
            type=ref,event=branch
            # Main branch gets both main and latest tags
            type=raw,value=main,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            # SHA for unique identification
            type=sha,prefix={{branch}}-
      
      - name: Build and push postal server image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: full
          platforms: linux/amd64
          build-args: |
            VERSION=${{ github.ref_name }}
            BRANCH=${{ github.ref_name }}
            COMMIT_SHA=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging Server
    runs-on: ubuntu-latest
    needs: publish-image
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.STAGING_IP }}
          username: root
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            set -e
            
            echo "üöÄ Starting Postal staging deployment..."
            
            # Login to GitHub Container Registry
            echo "üîê Authenticating with GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull the latest Docker image from registry
            echo "üì• Pulling latest Docker image from registry..."
            docker pull ${{ vars.STAGING_DOCKER_IMAGE }}
            
            echo "‚úÖ Docker image ready"
            
            # Stop existing services if running
            echo "‚èπÔ∏è Stopping existing Postal services..."
            if postal status >/dev/null 2>&1; then
              postal stop
              echo "‚úÖ Postal services stopped"
            else
              echo "‚ÑπÔ∏è Postal services not running"
            fi
            
            if docker ps | grep -q postal-caddy; then
              docker stop postal-caddy && docker rm postal-caddy
              echo "‚úÖ Caddy stopped and removed"
            else
              echo "‚ÑπÔ∏è Caddy not running"
            fi
            
            # Clean up old containers and images (only if needed)
            echo "üßπ Cleaning up Docker resources..."
            CONTAINERS_TO_CLEAN=$(docker container ls -aq --filter "status=exited" | wc -l)
            if [ "$CONTAINERS_TO_CLEAN" -gt 0 ]; then
              docker container prune -f
              echo "‚úÖ Cleaned $CONTAINERS_TO_CLEAN stopped containers"
            else
              echo "‚ÑπÔ∏è No containers to clean"
            fi
            
            IMAGES_TO_CLEAN=$(docker images -f "dangling=true" -q | wc -l)
            if [ "$IMAGES_TO_CLEAN" -gt 0 ]; then
              docker image prune -f
              echo "‚úÖ Cleaned $IMAGES_TO_CLEAN dangling images"
            else
              echo "‚ÑπÔ∏è No dangling images to clean"
            fi
            
            # Setup MariaDB if not running
            echo "üóÑÔ∏è Setting up MariaDB container..."
            if ! docker ps | grep -q postal-mariadb; then
              docker run -d \
                --name postal-mariadb \
                -p ${{ vars.STAGING_MARIADB_HOST }}:${{ vars.STAGING_MARIADB_PORT }}:${{ vars.STAGING_MARIADB_PORT }} \
                --restart always \
                -e MARIADB_DATABASE=${{ vars.STAGING_MARIADB_DATABASE }} \
                -e MARIADB_ROOT_PASSWORD=${{ secrets.STAGING_MARIADB_PASSWORD }} \
                mariadb:latest
              
              # Wait for MariaDB to be ready
              echo "‚è≥ Waiting for MariaDB to start..."
              sleep 30
              
              # Test MariaDB connection
              until docker exec postal-mariadb mysqladmin ping -h localhost --silent; do
                echo "Waiting for MariaDB to be ready..."
                sleep 5
              done
            else
              echo "‚úÖ MariaDB already running"
            fi
            
            # Clone/update postal-install repository
            echo "üì• Setting up postal-install..."
            if [ -d "/opt/postal/install" ]; then
              cd /opt/postal/install
              echo "‚ÑπÔ∏è Updating existing postal-install repository..."
              git fetch origin
              CURRENT_COMMIT=$(git rev-parse HEAD)
              git reset --hard origin/main
              NEW_COMMIT=$(git rev-parse HEAD)
              if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
                echo "‚úÖ Updated postal-install ($(echo $NEW_COMMIT | cut -c1-8))"
              else
                echo "‚ÑπÔ∏è postal-install already up to date"
              fi
            else
              echo "üì¶ Cloning postal-install repository..."
              git clone https://github.com/PhishSpot/postal-install /opt/postal/install
              ln -sf /opt/postal/install/bin/postal /usr/bin/postal
              echo "‚úÖ postal-install cloned and linked"
            fi
            
            # Bootstrap Postal configuration
            echo "‚öôÔ∏è Bootstrapping Postal configuration..."
            cd /opt/postal/install
            GITHUB_URL=https://github.com/PhishSpot/postal-server GITHUB_BRANCH=${{ github.ref_name }} postal bootstrap ${{ vars.STAGING_HOST }}

            # Initialize Postal database (skip if already done)
            echo "üóÑÔ∏è Initializing Postal database..."
            cd /opt/postal/install
            if GITHUB_URL=https://github.com/PhishSpot/postal-server GITHUB_BRANCH=${{ github.ref_name }} postal initialize 2>&1 | grep -q "already exists\|Nothing to do"; then
              echo "‚ÑπÔ∏è Database already initialized, running migrations only"
            else
              echo "‚úÖ Database initialized successfully"
            fi
            
            # Start Postal services
            echo "üöÄ Starting Postal services..."
            postal start
            
            # Wait for Postal to be ready
            echo "‚è≥ Waiting for Postal to start..."
            sleep 15
            
            # Start Caddy reverse proxy
            echo "üåê Starting Caddy reverse proxy..."
            docker run -d \
              --name postal-caddy \
              --restart always \
              --network host \
              -v /opt/postal/config/Caddyfile:/etc/caddy/Caddyfile \
              -v /opt/postal/caddy-data:/data \
              caddy:latest
            
            # Health check
            echo "üè• Performing health check..."
            sleep 10
            
            # Check if services are running
            if docker ps | grep -q postal; then
              echo "‚úÖ Postal container is running"
            else
              echo "‚ùå Postal container failed to start"
              postal logs
              exit 1
            fi
            
            if docker ps | grep -q postal-caddy; then
              echo "‚úÖ Caddy container is running"
            else
              echo "‚ùå Caddy container failed to start"
              exit 1
            fi
            
            if docker ps | grep -q postal-mariadb; then
              echo "‚úÖ MariaDB container is running"
            else
              echo "‚ùå MariaDB container failed to start"
              exit 1
            fi
            
            # Test HTTP endpoint with retry logic
            echo "üåê Testing Postal web interface..."
            RETRY_COUNT=0
            MAX_RETRIES=3
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -f -s --max-time 10 https://${{ vars.STAGING_HOST }} > /dev/null; then
                echo "‚úÖ Postal web interface is accessible"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "‚è≥ Web interface not ready, retrying in 10 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
                  sleep 10
                else
                  echo "‚ö†Ô∏è Web interface not accessible after $MAX_RETRIES attempts (this may be normal during startup)"
                fi
              fi
            done
            
            echo "üéâ Postal staging deployment completed successfully!"
            echo "üåê Access Postal at: https://${{ vars.STAGING_HOST }}"
            
            # Display running containers
            echo "üìä Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: Notify staging deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful to https://${{ vars.STAGING_HOST }}"
          else
            echo "‚ùå Staging deployment failed"
          fi

  deploy-production:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: publish-image
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.PRODUCTION_IP }}
          username: root
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            set -e

            echo "üöÄ Starting Postal production deployment..."
            echo "‚ö†Ô∏è PRODUCTION DEPLOYMENT"

            # Login to GitHub Container Registry
            echo "üîê Authenticating with GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull the latest Docker image from registry
            echo "üì• Pulling latest Docker image from registry..."
            docker pull ${{ vars.PRODUCTION_DOCKER_IMAGE }}

            echo "‚úÖ Docker image ready"

            # Stop existing services if running
            echo "‚èπÔ∏è Stopping existing Postal services..."
            if postal status >/dev/null 2>&1; then
              postal stop
              echo "‚úÖ Postal services stopped"
            else
              echo "‚ÑπÔ∏è Postal services not running"
            fi

            if docker ps | grep -q postal-caddy; then
              docker stop postal-caddy && docker rm postal-caddy
              echo "‚úÖ Caddy stopped and removed"
            else
              echo "‚ÑπÔ∏è Caddy not running"
            fi

            # Clean up old containers and images (only if needed)
            echo "üßπ Cleaning up Docker resources..."
            CONTAINERS_TO_CLEAN=$(docker container ls -aq --filter "status=exited" | wc -l)
            if [ "$CONTAINERS_TO_CLEAN" -gt 0 ]; then
              docker container prune -f
              echo "‚úÖ Cleaned $CONTAINERS_TO_CLEAN stopped containers"
            else
              echo "‚ÑπÔ∏è No containers to clean"
            fi

            IMAGES_TO_CLEAN=$(docker images -f "dangling=true" -q | wc -l)
            if [ "$IMAGES_TO_CLEAN" -gt 0 ]; then
              docker image prune -f
              echo "‚úÖ Cleaned $IMAGES_TO_CLEAN dangling images"
            else
              echo "‚ÑπÔ∏è No dangling images to clean"
            fi

            # Setup MariaDB if not running
            echo "üóÑÔ∏è Setting up MariaDB container..."
            if ! docker ps | grep -q postal-mariadb; then
              docker run -d \
                --name postal-mariadb \
                -p ${{ vars.PRODUCTION_MARIADB_HOST }}:${{ vars.PRODUCTION_MARIADB_PORT }}:${{ vars.PRODUCTION_MARIADB_PORT }} \
                --restart always \
                -e MARIADB_DATABASE=${{ vars.PRODUCTION_MARIADB_DATABASE }} \
                -e MARIADB_ROOT_PASSWORD=${{ secrets.PRODUCTION_MARIADB_PASSWORD }} \
                mariadb:latest

              # Wait for MariaDB to be ready
              echo "‚è≥ Waiting for MariaDB to start..."
              sleep 30

              # Test MariaDB connection
              until docker exec postal-mariadb mysqladmin ping -h localhost --silent; do
                echo "Waiting for MariaDB to be ready..."
                sleep 5
              done
            else
              echo "‚úÖ MariaDB already running"
            fi

            # Clone/update postal-install repository
            echo "üì• Setting up postal-install..."
            if [ -d "/opt/postal/install" ]; then
              cd /opt/postal/install
              echo "‚ÑπÔ∏è Updating existing postal-install repository..."
              git fetch origin
              CURRENT_COMMIT=$(git rev-parse HEAD)
              git reset --hard origin/main
              NEW_COMMIT=$(git rev-parse HEAD)
              if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
                echo "‚úÖ Updated postal-install ($(echo $NEW_COMMIT | cut -c1-8))"
              else
                echo "‚ÑπÔ∏è postal-install already up to date"
              fi
            else
              echo "üì¶ Cloning postal-install repository..."
              git clone https://github.com/PhishSpot/postal-install /opt/postal/install
              ln -sf /opt/postal/install/bin/postal /usr/bin/postal
              echo "‚úÖ postal-install cloned and linked"
            fi

            # Bootstrap Postal configuration
            echo "‚öôÔ∏è Bootstrapping Postal configuration..."
            cd /opt/postal/install
            GITHUB_URL=https://github.com/PhishSpot/postal-server GITHUB_BRANCH=${{ github.ref_name }} postal bootstrap ${{ vars.PRODUCTION_HOST }}

            # Initialize Postal database (skip if already done)
            echo "üóÑÔ∏è Initializing Postal database..."
            cd /opt/postal/install
            if GITHUB_URL=https://github.com/PhishSpot/postal-server GITHUB_BRANCH=${{ github.ref_name }} postal initialize 2>&1 | grep -q "already exists\|Nothing to do"; then
              echo "‚ÑπÔ∏è Database already initialized, running migrations only"
            else
              echo "‚úÖ Database initialized successfully"
            fi

            # Start Postal services
            echo "üöÄ Starting Postal services..."
            postal start

            # Wait for Postal to be ready
            echo "‚è≥ Waiting for Postal to start..."
            sleep 15

            # Start Caddy reverse proxy
            echo "üåê Starting Caddy reverse proxy..."
            docker run -d \
              --name postal-caddy \
              --restart always \
              --network host \
              -v /opt/postal/config/Caddyfile:/etc/caddy/Caddyfile \
              -v /opt/postal/caddy-data:/data \
              caddy:latest

            # Health check
            echo "üè• Performing health check..."
            sleep 10

            # Check if services are running
            if docker ps | grep -q postal; then
              echo "‚úÖ Postal container is running"
            else
              echo "‚ùå Postal container failed to start"
              postal logs
              exit 1
            fi

            if docker ps | grep -q postal-caddy; then
              echo "‚úÖ Caddy container is running"
            else
              echo "‚ùå Caddy container failed to start"
              exit 1
            fi

            if docker ps | grep -q postal-mariadb; then
              echo "‚úÖ MariaDB container is running"
            else
              echo "‚ùå MariaDB container failed to start"
              exit 1
            fi

            # Test HTTP endpoint with retry logic
            echo "üåê Testing Postal web interface..."
            RETRY_COUNT=0
            MAX_RETRIES=3
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if curl -f -s --max-time 10 https://${{ vars.PRODUCTION_HOST }} > /dev/null; then
                echo "‚úÖ Postal web interface is accessible"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "‚è≥ Web interface not ready, retrying in 10 seconds... ($RETRY_COUNT/$MAX_RETRIES)"
                  sleep 10
                else
                  echo "‚ö†Ô∏è Web interface not accessible after $MAX_RETRIES attempts (this may be normal during startup)"
                fi
              fi
            done

            echo "üéâ Postal production deployment completed successfully!"
            echo "üåê Access Postal at: https://${{ vars.PRODUCTION_HOST }}"

            # Display running containers
            echo "üìä Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

      - name: Notify production deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment successful to https://${{ vars.PRODUCTION_HOST }}"
          else
            echo "‚ùå Production deployment failed"
          fi